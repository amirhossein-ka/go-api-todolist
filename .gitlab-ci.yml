stages:
  - format
  - build

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

format-job:
  stage: format
  image: golang:1.23-alpine
  cache:
    key: go-mod
    paths:
      - /go/pkg/mod
  script:
    - export HTTP_PROXY=$SOCKS_PROXY
    - export HTTPS_PROXY=$SOCKS_PROXY
    - go fmt $(go list ./...)
    - go vet $(go list ./...)
  allow_failure: false


build-job:
  stage: build
  script:
    - echo "Hello, $CI_REGISTRY! --- $CI_JOB_TOKEN --- $CI_REGISTRY_USER, TAG_LATEST"
    - export HTTP_PROXY=$SOCKS_PROXY
    - export HTTPS_PROXY=$SOCKS_PROXY
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build --build-arg HTTP_PROXY=$SOCKS_PROXY --build-arg HTTPS_PROXY=$SOCKS_PROXY -t $TAG_COMMIT -t TAG_LATEST .
    - docker save -o $CI_PROJECT_NAME.tar.gz $CI_PROJECT_NAME:latest
  artifacts:
    when: on_success
    access: all
    expire_in: 30 days
    paths:
      - "*.tar.gz"