workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /skip ci/'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
    - changes:
      - "**/*.yaml"
      - "**/*.yml"
      when: never

stages:
  - format
  - build
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

format-job:
  stage: format
  image: golang:1.23-alpine
  cache:
    key: go-mod
    paths:
      - /go/pkg/mod
  script:
    - export HTTP_PROXY=$SOCKS_PROXY
    - export HTTPS_PROXY=$SOCKS_PROXY
    - go fmt $(go list ./...)
    - go vet $(go list ./...)
  allow_failure: false

build-job:
  stage: build
  script:
    - export HTTP_PROXY=$SOCKS_PROXY
    - export HTTPS_PROXY=$SOCKS_PROXY
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build --build-arg HTTP_PROXY=$SOCKS_PROXY --build-arg HTTPS_PROXY=$SOCKS_PROXY -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy-dev:
  stage: deploy
  image: alpine
  before_script:
    - apk add --no-cache curl
    - curl -k -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
    - echo pre script done.
  script:
    - argocd login $ARGOCD_SERVER --insecure --username $ARGOCD_USER --auth-token $ARGOCD_AUTH_TOKEN
    - argocd app sync moz
    - argocd app wait moz