apiVersion: v1
kind: Namespace
metadata:
  name: todo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
  namespace: todo
data:
  - init.sh: |
      # actual script in mongo-configmap.yaml
      set -euo pipefail
      MY_POD=$(hostname)
      # shellcheck disable=SC2269
      RS_NAME=${REPLICA_SET_NAME}
      echo "Starting init container on pod: ${MY_POD}"

      # Function to check DNS resolution of a pod hostname.
      wait_for_dns() {
        local pod_host=$1
        echo "Waiting for DNS resolution of ${pod_host} ..."
        until getent hosts "${pod_host}" >/dev/null 2>&1; do
          sleep 2
        done
        echo "${pod_host} is resolvable."
      }

      # If this is the first pod, perform the replica set initialization.
      if [[ "${MY_POD}" == "mongo-0" ]]; then
        echo "This is mongo-0. Waiting for all replica set members to be resolvable..."
        for i in $(seq 0 $((EXPECTED_MEMBERS - 1))); do
          POD_HOST="mongo-${i}.${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local"
          wait_for_dns "${POD_HOST}"
        done

        # Give pods a bit more time to finish startup.
        echo "Waiting 10 additional seconds for all pods to be fully ready..."
        sleep 10

        echo "Initiating the replica set..."
        mongo --eval "rs.initiate({
      		_id: '${RS_NAME}',
      		members: [
      		    { _id: 0, host: 'mongo-0.${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local:27017' },
      			  { _id: 1, host: 'mongo-1.${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local:27017' },
            ]
          })" || {
          echo "Replica set initiation failed. It may already be initialized."
        }
      else
        # For all other pods, wait until the replica set is initiated.
        echo "This is ${MY_POD}. Waiting for the replica set to be initiated by mongo-0..."
        RETRIES=30
        until mongo --eval "rs.status().ok" --quiet | grep -q 1; do
          RETRIES=$((RETRIES - 1))
          if [ $RETRIES -le 0 ]; then
            echo "Timeout waiting for replica set initialization."
            exit 1
          fi
          sleep 2
        done
        echo "Replica set is active. ${MY_POD} will now proceed."
      fi

      echo "Init container tasks completed on ${MY_POD}."
      echo "container sleeping..."
      sleep inf
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: todo
    type: db
  name: mongo-svc
  namespace: todo
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: todo
    type: db
  name: mongo
  namespace: todo
spec:
  selector:
    matchLabels:
      app: todo
      type: db
  serviceName: mongodb
  template:
    spec:
      containers:
        - name: mongo
          image: git.me.com:5050/mongo:latest
          command:
            - mongod
            - --replSet
            - rs0
          ports:
            - containerPort: 27017
              name: mongo-port
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - db.serverStatus()
            initialDelaySeconds: 10
            timeoutSeconds: 5
        - name: mongo-init
          image: git.me.com:5050/mongo:latest
          command:
            - bash
            - /config/init-mongo.sh
          env:
            - name: NAMESPACE
              value: default
            - name: SERVICE_NAME
              value: mongo
            - name: REPLICA_SET_NAME
              value: rs0
            - name: EXPECTED_MEMBERS
              value: "2"
          volumeMounts:
            - mountPath: /config
              name: init
      volumes:
        - name: init
          configMap:
            name: mongo-init
  volumeClaimTemplates:
    - metadata:
        namespace: todo
        name: mongo-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: openebs-hostpath
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: todo
  name: todo-app
  labels:
    app: todo
    type: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todo
      type: api
  template:
    metadata:
      labels:
        app: todo
        type: api
    spec:
      containers:
        - name: todo-api
          image: go-api-todolist
          livenessProbe:
            httpGet:
              port: 8000
              path: /healthz
          resources:
            requests:
              cpu: 100m
              memory: 20Mi
            limits:
              cpu: 500m
              memory: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: todo
  name: todo-api
  namespace: todo
spec:
  selector:
    app: todo
  ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000